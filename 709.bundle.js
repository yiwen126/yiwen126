(self.webpackChunkcanvas_blog=self.webpackChunkcanvas_blog||[]).push([[709],{709:(t,e,i)=>{"use strict";function n(t){return function(t){if(Array.isArray(t))return o(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return o(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function r(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function a(t,e,i){return e&&r(t.prototype,e),i&&r(t,i),t}function h(){var t=300,e=.98,i=1,o=3,r=3,h=80,l=2,c=document.querySelector("#firework");c.style.background="black";var u,d,f=c.getContext("2d");function w(){d=c.height=window.innerHeight;var t=c.closest("section");u=c.width=t.clientWidth}function v(t,e){return t=Math.ceil(t),e=Math.floor(e),Math.floor(Math.random()*(e-t+1))+t}w(),window.addEventListener("resize",w);var m=function(){function e(t,i,n,o){s(this,e),this.nowX=this.startX=t,this.nowY=this.startY=i,this.targetX=n,this.targetY=o,this.collection=Array(10),this.angle=Math.atan2(o-i,n-t),this.lastUpdateTime=Date.now()}return a(e,[{key:"draw",value:function(){var t;f.beginPath();try{f.moveTo.apply(f,n(this.collection[0])),t=f.createLinearGradient.apply(f,n(this.collection[0]).concat([this.nowX,this.nowY]))}catch(e){f.moveTo(this.startX,this.startY),t=f.createLinearGradient(this.startX,this.startY,this.nowX,this.nowY)}t.addColorStop(0,"rgba(255, 255, 255, 0)"),t.addColorStop(1,"rgba(255, 255, 255, 1)"),f.strokeStyle=t,f.lineWidth=1,f.lineTo(this.nowX,this.nowY),f.stroke()}},{key:"update",value:function(){if(this.collection.push([this.nowX,this.nowY]),this.collection.shift(),this.collection[0]&&this.collection[0][1]<=this.targetY)this.over=!0;else if(!(this.nowY<=this.targetY)){var e=Date.now();this.nowX+=Math.cos(this.angle)*t*(e-this.lastUpdateTime)/1e3,this.nowY+=Math.sin(this.angle)*t*(e-this.lastUpdateTime)/1e3,this.lastUpdateTime=e}}},{key:"init",value:function(){this.update(),this.draw()}}]),e}(),y=function(){function n(i,a,h){s(this,n),this.nowX=i,this.nowY=a,this.angle=h,this.acceleration=e,this.startTime=this.lastUpdateTime=Date.now(),this.speed=t*Math.random(),this.width=o,this.height=r,this.fillStyle="rgb(".concat(v(0,255),",").concat(v(0,255),",").concat(v(0,255),")"),this.overTime=l*Math.random()}return a(n,[{key:"init",value:function(){this.update(),this.draw()}},{key:"update",value:function(){var t=Date.now();(t-this.startTime)/1e3>this.overTime?this.over=!0:(this.speed*=this.acceleration,this.nowX+=Math.cos(this.angle)*this.speed*(t-this.lastUpdateTime)/1e3,this.nowY+=Math.sin(this.angle)*this.speed*(t-this.lastUpdateTime)/1e3+i,this.lastUpdateTime=t)}},{key:"draw",value:function(){f.save(),f.translate(-this.width,-this.height),f.fillStyle=this.fillStyle,f.fillRect(this.nowX,this.nowY,this.width,this.height),f.restore()}}]),n}(),p=new(function(){function t(){s(this,t),this.biu=[],this.booms=[],this.sigleFire=!0,this.shoot=this.shoot.bind(this),this.render=this.render.bind(this),this.handleKeyDown=this.handleKeyDown.bind(this)}return a(t,[{key:"pushBooms",value:function(t,e){for(var i=0;i<h;i++)this.booms.push(new y(t,e,Math.random()*Math.PI*2))}},{key:"init",value:function(){this.listenInput(),this.render()}},{key:"listenInput",value:function(){window.addEventListener("keydown",this.handleKeyDown,!1),c.addEventListener("click",this.shoot,!1)}},{key:"handleKeyDown",value:function(){this.sigleFire?(c.removeEventListener("click",this.shoot,!1),c.addEventListener("mousemove",this.shoot,!1),this.sigleFire=!1):(c.removeEventListener("mousemove",this.shoot,!1),c.addEventListener("click",this.shoot,!1),this.sigleFire=!0)}},{key:"shoot",value:function(t){var e,i,n,o,s,r=(e=t,i=c.getBoundingClientRect(),{x:e.clientX-i.left,y:e.clientY-i.top});o=(n=r).x,s=n.y,o>=0&&o<=c.width&&s>=0&&s<=c.height&&this.biu.push(new m(0,d,r.x,r.y))}},{key:"render",value:function(){var t=this;f.save(),f.fillStyle="rgba(0,0,0,0.1)",f.fillRect(0,0,u,d),f.restore(),this.biu.forEach((function(e,i){e.init(),e.over&&(t.pushBooms(e.targetX,e.targetY),t.biu.splice(i,1))})),this.booms.forEach((function(e,i){e.init(),e.over&&t.booms.splice(i,1)})),this.renderID=requestAnimationFrame(this.render)}},{key:"exit",value:function(){this.renderID&&window.cancelAnimationFrame(this.renderID),window.removeEventListener("keydown",this.handleKeyDown,!1),c.removeEventListener("mousemove",this.shoot,!1),c.removeEventListener("click",this.shoot,!1)}}]),t}());return p.init(),function(){p.exit(),p=null,window.removeEventListener("resize",w)}}i.r(e),i.d(e,{init:()=>h})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,