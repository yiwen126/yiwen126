(self.webpackChunkcanvas_blog=self.webpackChunkcanvas_blog||[]).push([[901,258],{258:()=>{window.requestAnimationFrame||(window.requestAnimationFrame=window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return window.setTimeout(t,1e3/60)}),window.cancelAnimationFrame||(window.cancelAnimationFrame=window.cancelRequestAnimationFrame||window.webkitCancelAnimationFrame||window.webkitCancelRequestAnimationFrame||window.mozCancelAnimationFrame||window.mozCancelRequestAnimationFrame||window.msCancelAnimationFrame||window.msCancelRequestAnimationFrame||window.oCancelAnimationFrame||window.oCancelRequestAnimationFrame||window.clearTimeout),window.utils={},utils.captureMouse=function(t){var e={x:0,y:0};return t.addEventListener("mousemove",(function(n){var i,o;n.pageX||n.pageY?(i=n.pageX,o=n.pageY):(i=n.clientX+document.body.scrollLeft+document.documentElement.scrollLeft,o=n.clientY+document.body.scrollTop+document.documentElement.scrollTop);var r=t.getBoundingClientRect();i=(i-r.left)*(t.width/r.width),o=(o-r.top)*(t.height/r.height),e.x=i,e.y=o}),!1),e}},901:(t,e,n)=>{"use strict";n.r(e),n.d(e,{init:()=>i});n(258);function i(){var t,e,n=document.getElementById("checkCollision"),i=n.getContext("2d");function o(){e=n.height=window.innerHeight;var i=n.closest("section");t=n.width=i.clientWidth}o(),window.addEventListener("resize",o);var r=function(){function t(t,e){this.vertexs=t,this.color=e,this.collide=!1}return t.prototype.draw=function(t){if(0!==this.vertexs.length){this.collide=!1;for(var e=0,n=this.vertexs.length;e<n;e++){if(0!==t.getImageData(this.vertexs[e].x,this.vertexs[e].y,1,1).data[3]){this.collide=!0;break}}t.save(),t.beginPath(),t.fillStyle=this.color,t.moveTo(this.vertexs[0].x,this.vertexs[0].y);for(e=1,n=this.vertexs.length;e<n;e++)t.lineTo(this.vertexs[e].x,this.vertexs[e].y);t.fill(),t.fillStyle="white",t.strokeStyle="black";for(e=0,n=this.vertexs.length;e<n;e++)t.beginPath(),t.arc(this.vertexs[e].x,this.vertexs[e].y,this.vertexs[e].r,0,2*Math.PI),t.fill(),t.stroke();t.restore()}},t}();function s(t){var e=n.getBoundingClientRect();return{x:t.clientX-e.left,y:t.clientY-e.top}}var a=new(function(){function o(t){this.polygonList=t,this.drawID=void 0,this.draw=this.draw.bind(this),this.onmousedown=this.onmousedown.bind(this)}return o.prototype.init=function(){this.listenMouse(),this.draw()},o.prototype.listenMouse=function(){n.addEventListener("mousedown",this.onmousedown)},o.prototype.distance=function(t,e){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))},o.prototype.getVertex=function(t){for(var e=this,n=0,i=this.polygonList.length;n<i;n++){var o=this.polygonList[n].vertexs.find((function(n){return e.distance(t,n)<n.r}));if(o)return o}},o.prototype.getPolygon=function(t){var e=i.getImageData(t.x,t.y,1,1),n=new RegExp([e.data.slice(0,3),e.data[3]/255].join(","));return this.polygonList.find((function(t){return n.test(t.color.trim())}))},o.prototype.onmousedown=function(t){var e,i,o,r=s(t);if(i=(e=r).x,o=e.y,i>=0&&i<=n.width&&o>=0&&o<=n.height){var a=this.getVertex(r),x=this.getPolygon(r);if(a){var l=r.x-a.x,u=r.y-a.y,h=this.moveVertex.bind(this,l,u,a);n.addEventListener("mousemove",h),n.addEventListener("mouseup",(function t(){n.removeEventListener("mousemove",h),n.removeEventListener("mouseup",t)}))}else if(x){var d=this.movePolygon.bind(this,x);x.vertexs.forEach((function(t){t.dx=r.x-t.x,t.dy=r.y-t.y})),n.addEventListener("mousemove",d),n.addEventListener("mouseup",(function t(){n.removeEventListener("mousemove",d),n.removeEventListener("mouseup",t)}))}}},o.prototype.moveVertex=function(t,e,n,i){n.x=s(i).x-t,n.y=s(i).y-e},o.prototype.movePolygon=function(t,e){t.vertexs.forEach((function(t){t.x=s(e).x-t.dx,t.y=s(e).y-t.dy}))},o.prototype.getLineList=function(t){return t.map((function(t,e){for(var n=[],i=0,o=t.vertexs.length;i<o;i++){var r=(i+1)%o,s=t.vertexs[i],a=s.x,x=s.y,l=t.vertexs[r],u=l.x,h=l.y,d=(x-h)/(a-u),c=(h*a-x*u)/(a-u);n.push({k:d,b:c,point1:{x:a,y:x},point2:{x:u,y:h}})}return n}))},o.prototype.isLineCollision=function(t,e){return Math.abs(t.k)!==Math.abs(e.k)},o.prototype.getCollisionPos=function(t,e){var n=t.k,i=t.b,o=e.k,r=e.b;return Math.abs(n)===1/0?{x:t.point1.x,y:o*t.point1.x+r}:Math.abs(o)===1/0?{x:e.point1.x,y:n*e.point1.x+i}:{x:(r-i)/(n-o),y:(n*r-o*i)/(n-o)}},o.prototype.isContain=function(t,e){var n,i,o,r,s,a,x,l;return n=i=t.vertexs[0].x,o=r=t.vertexs[0].y,s=a=e.vertexs[0].x,x=l=e.vertexs[0].y,t.vertexs.forEach((function(t){t.x>n&&(n=t.x),t.x<i&&(i=t.x),t.y>o&&(o=t.y),t.y<r&&(r=t.y)})),e.vertexs.forEach((function(t){t.x>s&&(s=t.x),t.x<a&&(a=t.x),t.y>x&&(x=t.y),t.y<l&&(l=t.y)})),i<=a&&s<=n&&r<=l&&x<=o},o.prototype.isCollide=function(t){for(var e=0,n=t.length;e<n;e++){if(!0===t[e].collide)return!0;for(var o=0,r=t[e].vertexs.length;o<r;o++){var s=i.getImageData(t[e].vertexs[o].x,t[e].vertexs[o].y,1,1);if(255!==s.data[0]||255!==s.data[1]||255!==s.data[2]||255!==s.data[3])return t[e].collide=!0,!0}}for(var a=this.getLineList(t),x=0,l=a.length;x<l-1;x++){t[x];for(var u=0,h=a[x].length;u<h;u++)for(var d=a[x][u],c=x+1,y=a.length;c<y;c++){t[c];for(var m=0,v=a[c].length;m<v;m++){var w=a[c][m];if(this.isLineCollision(d,w)){var p=this.getCollisionPos(d,w);if(Math.min(d.point1.x,d.point2.x)<=p.x&&p.x<=Math.max(d.point1.x,d.point2.x)&&Math.min(w.point1.x,w.point2.x)<=p.x&&p.x<=Math.max(w.point1.x,w.point2.x)&&Math.min(d.point1.y,d.point2.y)<=p.y&&p.y<=Math.max(d.point1.y,d.point2.y)&&Math.min(w.point1.y,w.point2.y)<=p.y&&p.y<=Math.max(w.point1.y,w.point2.y))return!0}}}}return!1},o.prototype.draw=function(){i.clearRect(0,0,t,e),this.polygonList.forEach((function(t){t.draw(i)})),this.isCollide(this.polygonList)&&(i.fillStyle="red",i.textAlign="center",i.font="50px 楷体",i.fillText("碰撞",t/2,e/2)),this.drawID=window.requestAnimationFrame(this.draw)},o.prototype.exit=function(){this.drawID&&window.cancelAnimationFrame(this.drawID),n.removeEventListener("mousedown",this.onmousedown)},o}())([new r([{x:20,y:20,r:10},{x:100,y:20,r:10},{x:100,y:100,r:10},{x:20,y:100,r:10}],"rgba(255,0,0,1)"),new r([{x:180,y:120,r:10},{x:200,y:20,r:10},{x:220,y:120,r:10}],"rgba(0,255,0,1)"),new r([{x:20,y:180,r:10},{x:120,y:180,r:10},{x:140,y:220,r:10},{x:0,y:220,r:10}],"rgba(0,0,255,1)"),new r([{x:180,y:180,r:10},{x:200,y:160,r:10},{x:220,y:180,r:10},{x:240,y:160,r:10},{x:260,y:180,r:10},{x:260,y:220,r:10},{x:220,y:240,r:10},{x:180,y:220,r:10}],"rgba(100,100,100,1)")]);return a.init(),function(){a.exit(),a=null,window.removeEventListener("resize",o)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,